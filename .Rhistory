install.packages(c(
"shiny",
"shinydashboard",
"plotly",
"leaflet",
"sf",
"dplyr",
"readr",
"lubridate",
"DT",
"htmltools",
"shinycssloaders"
))
# install.packages(c("httr", "jsonlite"))  # if you don’t already have them
library(httr)
library(jsonlite)
# 1. HPI: catalogue 6416.0, all capital-cities series, quarterly since 2003
url_hpi <- paste0(
"https://api.data.abs.gov.au/data/ABS,6416.0,Time%20Period,Series?startPeriod=2003-Q1&endPeriod=2025-Q2&format=csv"
)
download.file(url_hpi, "data/hpi.csv")
download.file(
url = "https://api.data.abs.gov.au/data/ABS,8731.0/Time%20Period,Region/all?startPeriod=2003-Q1&endPeriod=2025-Q2&format=csv",
destfile = "data/building_approvals.csv"
)
urls <- list(
hpi  = "https://data.api.abs.gov.au/rest/data/ABS,6416.0/all?startPeriod=2003-Q1&endPeriod=2025-Q2&format=csv",
rent = "https://data.api.abs.gov.au/rest/data/ABS,6417.0/all?startPeriod=2003-Q1&endPeriod=2025-Q2&format=csv",
nom  = "https://data.api.abs.gov.au/rest/data/ABS,3412.0.55.001/all?startPeriod=2003&endPeriod=2024&format=csv",
pop  = "https://data.api.abs.gov.au/rest/data/ABS,3101.0/all?startPeriod=2011-Q1&endPeriod=2025-Q2&format=csv",
apps = "https://data.api.abs.gov.au/rest/data/ABS,8731.0/all?startPeriod=2003-Q1&endPeriod=2025-Q2&format=csv",
cash = "https://www.rba.gov.au/statistics/tables/csv/f1.1-data.csv"
)
dir.create("data", showWarnings = FALSE)
for (nm in names(urls)) {
download.file(
urls[[nm]],
destfile = file.path("data", paste0(nm, ".csv")),
mode = "wb"
)
}
download.file(
"https://data.api.abs.gov.au/rest/data/ABS,6417.0/all?startPeriod=2003-Q1&endPeriod=2025-Q2&format=csv",
destfile = "data/rent_index.csv", mode = "wb"
)
install.packages("readabs")
library(readabs)
rent_idx <- abs_get_data("6417.0")  # Dwelling Rent Index
# 1. install & load
install.packages("readabs")
library(readabs)
# 2. (Optional) tell readabs where to save the raw Excel files
#    (otherwise it uses a tempdir that disappears when your R session ends)
Sys.setenv(R_READABS_PATH = "data/abs")
# 3. Download, import & tidy **all** the tables in 6417.0
rent_index <- read_abs(
cat_no = "6417.0",      # catalogue number
tables = "all",         # you can also do tables = 1 to grab just Table 1
metadata = FALSE        # drop the metadata columns if you only want date|value
)
# 1. install & load
install.packages("readabs")
library(readabs)
# 2. (Optional) tell readabs where to save the raw Excel files
#    (otherwise it uses a tempdir that disappears when your R session ends)
Sys.setenv(R_READABS_PATH = "data/abs")
# 3. Download, import & tidy **all** the tables in 6417.0
rent_index <- read_abs(
cat_no = "6417.0",      # catalogue number
tables = "all",         # you can also do tables = 1 to grab just Table 1
metadata = FALSE        # drop the metadata columns if you only want date|value
)
# install.packages("readabs")  # if you haven’t already
library(readabs)
Sys.setenv(R_READABS_PATH = "data/abs")  # cache the raw Excel here
rent_index <- read_abs(
cat_no   = "6417.0",   # Dwelling Rent Index
tables   = 1,          # grab “Table 1: Dwelling Rent Index – All groups”
metadata = FALSE       # drop extra metadata, gives you date|region|value
)
# install.packages("readxl")
library(readxl)
download.file(
"https://raw.githubusercontent.com/adamrossnelson/abs-data-harvester/main/6417.0/dri-quarterly.xlsx",
"data/dri-quarterly.xlsx", mode="wb"
)
# 1. Download the Excel
download.file(
"https://raw.githubusercontent.com/adamrossnelson/abs-data-harvester/main/6417.0/dri-quarterly.xlsx",
destfile = "data/dri-quarterly.xlsx",
mode = "wb"
)
install.packages(c("httr","rjstat"))
library(httr)
library(rjstat)
install.packages(c("httr","rjstat"))
library(httr)
library(rjstat)
url <- paste0(
"https://data.api.abs.gov.au/rest/data/ABS,6417.0/",
"Time%20Period,Region/all",
"?startPeriod=2003-Q1&endPeriod=2024-Q4&format=json-stat2"
)
resp    <- GET(url)
jstat    <- fromJSONstat(rawToChar(resp$content))
# 1. install dependencies if you need to
install.packages(c("httr","rjstat"))
# 2. load libraries
library(httr)
library(rjstat)
# 3. construct the JSON-Stat2 URL
url <- paste0(
"https://data.api.abs.gov.au/rest/data/ABS,6417.0/",
"Time%20Period,Region/all",
"?startPeriod=2003-Q1&endPeriod=2025-Q2&format=json-stat2"
)
# 4. fetch & parse
resp     <- GET(url)
stop_for_status(resp)
# 1. install dependencies if you need to
install.packages(c("httr","rjstat"))
# 2. load libraries
library(httr)
library(rjstat)
# 3. construct the JSON-Stat2 URL
url <- paste0(
"https://data.api.abs.gov.au/rest/data/ABS,6417.0/",
"Time%20Period,Region/all",
"?startPeriod=2003-Q1&endPeriod=2025-Q2&format=json-stat2"
)
# 4. fetch & parse
resp     <- GET(url)
stop_for_status(resp)
# build_approvals_prep.R
# 0. (Uncomment the next line if you need to install these)
# install.packages(c("readxl","dplyr","tidyr","stringr","readr"))
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
# 1. Setup paths
input_folder <- "data/Dwellings-aproved"
output_csv   <- "data/building_approvals_clean.csv"
# 2. Grab all .xlsx files
files <- list.files(
path        = input_folder,
pattern     = "\\.xlsx$",
full.names  = TRUE
)
message("Found ", length(files), " Excel files to process.")
# 3. Loop over each file and tidy
df_list <- vector("list", length(files))
for(i in seq_along(files)) {
f <- files[i]
message("  • Processing file ", i, "/", length(files), ": ", basename(f))
# 3a. Read header row (skip to row 9)
hdr_raw <- read_excel(
path      = f,
sheet     = "Data1",
skip      = 8,
n_max     = 1,
col_names = FALSE
)
hdr      <- as.character(unlist(hdr_raw))
hdr[1]   <- "Date"
# 3b. Read the data starting row 10
raw <- read_excel(
path      = f,
sheet     = "Data1",
skip      = 9,
col_names = FALSE
)
names(raw) <- hdr
# 3c. Tidy & filter for total approvals by state
df <- raw %>%
mutate(Date = as.Date(Date)) %>%
pivot_longer(
cols      = -Date,
names_to  = "series",
values_to = "approvals"
) %>%
filter(
str_detect(series, "Total \\(Type of Building\\)") &
str_detect(series, "Total Sectors")
) %>%
mutate(
region = str_trim(word(series, 3, sep = ";"))
) %>%
select(Date, region, approvals)
df_list[[i]] <- df
}
# 4. Combine everything & sort
df_all <- bind_rows(df_list) %>%
arrange(Date, region)
# build_approvals_prep.R
# 0. Install (if needed) and load
# install.packages(c("readxl","dplyr","tidyr","stringr","readr"))
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
# 1. Paths
input_folder <- "data/Dwellings-aproved"
output_csv   <- "data/building_approvals_clean.csv"
# 2. Find all Excel files (however many there are)
files <- list.files(input_folder, pattern="\\.xlsx$", full.names=TRUE)
message("Will process ", length(files), " files...")
# 3. Read & tidy each one
df_list <- lapply(files, function(f) {
message(" • ", basename(f))
# 3a. Read the sheet, skipping the first 8 rows so that row 9 becomes your header
raw <- read_excel(f, sheet="Data1", skip=8)
# 3b. Fix the first column name
names(raw)[1] <- "Date"
# 3c. Convert to Date
raw <- raw %>% mutate(Date = as.Date(Date))
# 3d. Pivot to long and filter only the total approvals per state
raw %>%
pivot_longer(
cols      = -Date,
names_to  = "series",
values_to = "approvals"
) %>%
filter(
str_detect(series, "Total \\(Type of Building\\)") &
str_detect(series, "Total Sectors")
) %>%
mutate(
region = str_trim(word(series, 3, sep=";"))
) %>%
select(Date, region, approvals)
})
# 4. Bind them all together, sort, and write out
df_all <- bind_rows(df_list) %>%
arrange(Date, region)
# build_approvals_prep.R
# 0. Install (if needed) and load
# install.packages(c("readxl","dplyr","tidyr","stringr","readr"))
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
# 1. Paths
input_folder <- "data/Dwellings-aproved"
output_csv   <- "data/building_approvals_clean.csv"
# 2. Find all Excel files (however many there are)
files <- list.files(input_folder, pattern="\\.xlsx$", full.names=TRUE)
message("Will process ", length(files), " files...")
# 3. Read & tidy each one
df_list <- lapply(files, function(f) {
message(" • ", basename(f))
# 3a. Read the sheet, skipping the first 8 rows so that row 9 becomes your header
raw <- read_excel(f, sheet="Data1", skip=8)
# 3b. Fix the first column name
names(raw)[1] <- "Date"
# 3c. Convert to Date
raw <- raw %>% mutate(Date = as.Date(Date))
# 3d. Pivot to long and filter only the total approvals per state
raw %>%
pivot_longer(
cols      = -Date,
names_to  = "series",
values_to = "approvals"
) %>%
filter(
str_detect(series, "Total \\(Type of Building\\)") &
str_detect(series, "Total Sectors")
) %>%
mutate(
region = str_trim(word(series, 3, sep=";"))
) %>%
select(Date, region, approvals)
})
# 4. Bind them all together, sort, and write out
df_all <- bind_rows(df_list) %>%
arrange(Date, region)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
getwd()
shiny::runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='0a38og-eran-dodampe0gamage', token='F2CCF5A4DACF30C0433AA4181B428E00', secret='XdmdYmDByC8ON2Ty7fbttPWn2BFRSwtkdO6AFVX8')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
rsconnect::deployApp()
